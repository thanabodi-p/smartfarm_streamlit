# import streamlit as st
# import time
# from datetime import datetime
# from utils import load_data_from_mongo, calculate_vpd, get_vpd_status

# # --- 1. ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô (‡∏ó‡∏≥‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß) ---
# st.set_page_config(page_title="Smart Framing Dashboard", layout="wide")
# st.title("üå± SmartFarm Real-Time Dashboard")

# # --- 2. ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ß‡∏≤‡∏î Dashboard ---
# def draw_dashboard(df_raw):
#     """
#     ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡∏£‡∏±‡∏ö DataFrame ‡∏î‡∏¥‡∏ö‡πÄ‡∏Ç‡πâ‡∏≤‡∏°‡∏≤ ‡πÅ‡∏•‡πâ‡∏ß‡∏ß‡∏≤‡∏î‡∏™‡πà‡∏ß‡∏ô‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
#     """
#     if df_raw.empty:
#         st.warning("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏ä‡πà‡∏ß‡∏á 24 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á‡∏ó‡∏µ‡πà‡∏ú‡πà‡∏≤‡∏ô‡∏°‡∏≤")
#         return # ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•

#     # --- ‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà 1: ‡∏Å‡∏£‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏•‡∏∞‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏™‡∏£‡∏∏‡∏õ ---
#     st.subheader("‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏£‡∏∏‡∏õ‡∏†‡∏≤‡∏û‡∏£‡∏ß‡∏° (Device: SmartFarm)")
#     df_smartfarm = df_raw[df_raw['deviceName'] == 'SmartFarm'].copy()

#     if df_smartfarm.empty:
#         st.warning("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å Device 'SmartFarm' ‡πÉ‡∏ô‡∏ä‡πà‡∏ß‡∏á 24 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á‡∏ó‡∏µ‡πà‡∏ú‡πà‡∏≤‡∏ô‡∏°‡∏≤")
#         return # ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å Device ‡∏ô‡∏µ‡πâ

#     # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ñ‡∏ß‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏™‡∏£‡∏∏‡∏õ
#     latest_data = df_smartfarm.sort_values(by='timestamp_local_dt').iloc[-1]
    
#     # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì VPD ‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
#     latest_vpd = calculate_vpd(latest_data['temperature'], latest_data['humidity'])
#     vpd_status, vpd_color = get_vpd_status(latest_vpd)

#     # ‡πÅ‡∏ö‡πà‡∏á‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏™‡∏£‡∏∏‡∏õ
#     col1, col2, col3, col4 = st.columns(4)
#     col1.metric("üå°Ô∏è ‡∏≠‡∏∏‡∏ì‡∏´‡∏†‡∏π‡∏°‡∏¥", f"{latest_data['temperature']:.2f} ¬∞C")
#     col2.metric("üíß ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡∏∑‡πâ‡∏ô‡∏≠‡∏≤‡∏Å‡∏≤‡∏®", f"{latest_data['humidity']:.2f} %")
#     col3.metric("üí® VPD", f"{latest_vpd:.2f} kPa", help="Vapor Pressure Deficit: ‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏ï‡∏Å‡∏ï‡πà‡∏≤‡∏á‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏î‡∏±‡∏ô‡πÑ‡∏≠‡∏≠‡∏¥‡πà‡∏°‡∏ï‡∏±‡∏ß‡∏Å‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏î‡∏±‡∏ô‡πÑ‡∏≠‡πÉ‡∏ô‡∏≠‡∏≤‡∏Å‡∏≤‡∏®‡∏à‡∏£‡∏¥‡∏á ‡∏¢‡∏¥‡πà‡∏á‡∏Ñ‡πà‡∏≤‡∏™‡∏π‡∏á ‡∏≠‡∏≤‡∏Å‡∏≤‡∏®‡∏¢‡∏¥‡πà‡∏á‡πÅ‡∏´‡πâ‡∏á")
#     col4.markdown(f"**‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ VPD:** <span style='color:{vpd_color};'>{vpd_status}</span>", unsafe_allow_html=True)

#     # --- ‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà 2: ‡∏Å‡∏£‡∏≤‡∏ü ---
#     st.divider()
#     st.subheader("‡∏Å‡∏£‡∏≤‡∏ü‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏≤‡∏°‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤")
#     chart_data = df_smartfarm.rename(columns={'timestamp_local_dt': 'index'}).set_index('index')

#     st.write("##### **‡∏Å‡∏£‡∏≤‡∏ü‡∏≠‡∏∏‡∏ì‡∏´‡∏†‡∏π‡∏°‡∏¥‡πÅ‡∏•‡∏∞‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡∏∑‡πâ‡∏ô‡∏≠‡∏≤‡∏Å‡∏≤‡∏®**")
#     st.line_chart(chart_data[['temperature', 'humidity']])

#     st.write("##### **‡∏Å‡∏£‡∏≤‡∏ü‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡∏∑‡πâ‡∏ô‡∏î‡∏¥‡∏ô (Soil Raw)**")
#     soil_columns = ['soil_raw_1', 'soil_raw_2', 'soil_raw_3', 'soil_raw_4']
#     st.line_chart(chart_data[soil_columns])

#     st.success(f"‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡πÄ‡∏°‡∏∑‡πà‡∏≠ {datetime.now().strftime('%H:%M:%S')}")
    

# # --- 3. ‡∏™‡∏£‡πâ‡∏≤‡∏á Placeholder ‡πÅ‡∏•‡∏∞‡∏•‡∏π‡∏õ Real-time ---
# placeholder = st.empty()

# while True:
#     # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡∏°‡πà
#     df_data = load_data_from_mongo("telemetry_data_clean", "SmartFarm")
    
#     # ‡∏™‡∏±‡πà‡∏á‡πÉ‡∏´‡πâ‡∏ß‡∏≤‡∏î Dashboard ‡πÉ‡∏´‡∏°‡πà‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏•‡∏á‡πÉ‡∏ô Placeholder
#     with placeholder.container():
#         draw_dashboard(df_data)
        
#     # ‡∏´‡∏ô‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤ 5 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
#     time.sleep(5)

# pages/1_üå±_‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ü‡∏≤‡∏£‡πå‡∏°.py
import streamlit as st
import pandas as pd
from datetime import datetime
from utils import load_data_from_mongo, calculate_vpd, get_vpd_status
from streamlit_autorefresh import st_autorefresh

# --- Page Config ---
st.set_page_config(
    page_title="Smart Framing Dashboard",
    page_icon="üå±",
    layout="wide"
)

# --- Auto-refresh every 5 seconds ---
st_autorefresh(interval=5000, key="monitoring_refresh")

# --- Header ---
st.title("üå± SmartFarm Real-Time Dashboard")
st.caption(f"‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î: {datetime.now().strftime('%H:%M:%S')}")

# --- Load Data ---
@st.cache_data(ttl=5)
def load_monitoring_data():
    """‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö monitoring"""
    df_sf = load_data_from_mongo("telemetry_data_clean", "SmartFarm", time_delta_days=1)
    df_rpi = load_data_from_mongo("raspberry_pi_telemetry_clean", "raspberry_pi_status", time_delta_days=1)
    return df_sf, df_rpi

df_smartfarm, df_rpi = load_monitoring_data()

# --- Section 1: SmartFarm Status Cards ---
st.subheader("üè° ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ SmartFarm")

if not df_smartfarm.empty:
    latest_sf = df_smartfarm.sort_values('timestamp_local_dt').iloc[-1]
    
    # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì VPD
    vpd = calculate_vpd(latest_sf['temperature'], latest_sf['humidity'])
    vpd_status, vpd_color = get_vpd_status(vpd)
    
    # ‡πÅ‡∏™‡∏î‡∏á‡∏Å‡∏≤‡∏£‡πå‡∏î KPI
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        st.metric(
            "üå°Ô∏è ‡∏≠‡∏∏‡∏ì‡∏´‡∏†‡∏π‡∏°‡∏¥",
            f"{latest_sf['temperature']:.1f} ¬∞C",
            f"{latest_sf['temperature'] - df_smartfarm['temperature'].mean():.1f}¬∞",
            delta_color="inverse" if latest_sf['temperature'] > 35 else "normal"
        )
    
    with col2:
        st.metric(
            "üíß ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡∏∑‡πâ‡∏ô",
            f"{latest_sf['humidity']:.1f} %",
            f"{latest_sf['humidity'] - df_smartfarm['humidity'].mean():.1f}%"
        )
    
    with col3:
        st.metric(
            "üí® VPD",
            f"{vpd:.2f} kPa",
            help="Vapor Pressure Deficit - ‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏° 0.5-1.5 kPa"
        )
    
    with col4:
        if vpd_status == "‚úÖ ‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°":
            st.success(vpd_status)
        else:
            st.warning(vpd_status)
    
    # ‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡∏∑‡πâ‡∏ô‡∏î‡∏¥‡∏ô
    with st.container():
        st.caption("üå± ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡∏∑‡πâ‡∏ô‡∏î‡∏¥‡∏ô")
        soil_cols = st.columns(4)
        for i, col in enumerate(soil_cols, 1):
            with col:
                soil_val = latest_sf[f'soil_raw_{i}']
                # ‡πÅ‡∏õ‡∏•‡∏á‡∏Ñ‡πà‡∏≤ raw ‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏õ‡∏≠‡∏£‡πå‡πÄ‡∏ã‡πá‡∏ô‡∏ï‡πå (‡∏™‡∏°‡∏°‡∏ï‡∏¥‡∏ß‡πà‡∏≤ 0-1023)
                soil_pct = (soil_val / 1023) * 100
                col.metric(f"‡∏à‡∏∏‡∏î‡∏ó‡∏µ‡πà {i}", f"{soil_pct:.0f}%", f"{soil_val:.0f}")
else:
    st.warning("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å SmartFarm")

st.divider()

# --- Section 2: Raspberry Pi Status Cards ---
st.subheader("üñ•Ô∏è ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ Raspberry Pi")

if not df_rpi.empty:
    latest_rpi = df_rpi.sort_values('timestamp_local_dt').iloc[-1]
    
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        cpu_temp = latest_rpi['cpu_temp']
        st.metric(
            "üå°Ô∏è CPU Temp",
            f"{cpu_temp:.1f} ¬∞C",
            delta_color="inverse" if cpu_temp > 70 else "normal"
        )
    
    with col2:
        cpu_usage = latest_rpi['cpu_percent']
        st.metric(
            "‚öôÔ∏è CPU Usage",
            f"{cpu_usage:.1f} %",
            delta_color="inverse" if cpu_usage > 80 else "normal"
        )
    
    with col3:
        mem = latest_rpi['memory_percent']
        st.metric(
            "üß† Memory",
            f"{mem:.1f} %",
            delta_color="inverse" if mem > 80 else "normal"
        )
    
    with col4:
        storage = latest_rpi['disk_percent']
        st.metric(
            "üíΩ Storage",
            f"{storage:.1f} %",
            delta_color="inverse" if storage > 90 else "normal"
        )
    
    # System Health Summary
    issues = []
    if cpu_temp > 70:
        issues.append("‚ö†Ô∏è CPU ‡∏£‡πâ‡∏≠‡∏ô‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ")
    if cpu_usage > 80:
        issues.append("‚ö†Ô∏è CPU ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏™‡∏π‡∏á")
    if mem > 80:
        issues.append("‚ö†Ô∏è ‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏≥‡πÉ‡∏Å‡∏•‡πâ‡πÄ‡∏ï‡πá‡∏°")
    if storage > 90:
        issues.append("‚ö†Ô∏è ‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏±‡∏î‡πÄ‡∏Å‡πá‡∏ö‡πÉ‡∏Å‡∏•‡πâ‡πÄ‡∏ï‡πá‡∏°")
    
    if issues:
        st.error(" | ".join(issues))
    else:
        st.success("‚úÖ ‡∏£‡∏∞‡∏ö‡∏ö‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏õ‡∏Å‡∏ï‡∏¥")
else:
    st.warning("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å Raspberry Pi")

st.divider()

# --- Section 3: Quick Trend Charts ---
st.subheader("üìà ‡πÅ‡∏ô‡∏ß‡πÇ‡∏ô‡πâ‡∏°‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î (3 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á‡∏ó‡∏µ‡πà‡∏ú‡πà‡∏≤‡∏ô‡∏°‡∏≤)")

# ‡∏Å‡∏£‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• 3 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
from datetime import timedelta
time_filter = datetime.now() - timedelta(hours=3)

col1, col2 = st.columns(2)

with col1:
    if not df_smartfarm.empty:
        st.caption("üå°Ô∏è ‡∏≠‡∏∏‡∏ì‡∏´‡∏†‡∏π‡∏°‡∏¥‡πÅ‡∏•‡∏∞‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡∏∑‡πâ‡∏ô")
        recent_sf = df_smartfarm[df_smartfarm['timestamp_local_dt'] > time_filter]
        if not recent_sf.empty:
            chart_data = recent_sf.set_index('timestamp_local_dt')[['temperature', 'humidity']]
            st.line_chart(chart_data, height=250)
        else:
            st.info("‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏ä‡πà‡∏ß‡∏á 3 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á‡∏ó‡∏µ‡πà‡∏ú‡πà‡∏≤‡∏ô‡∏°‡∏≤")

with col2:
    if not df_rpi.empty:
        st.caption("üñ•Ô∏è ‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û‡∏£‡∏∞‡∏ö‡∏ö")
        recent_rpi = df_rpi[df_rpi['timestamp_local_dt'] > time_filter]
        if not recent_rpi.empty:
            chart_data = recent_rpi.set_index('timestamp_local_dt')[['cpu_percent', 'memory_percent']]
            st.line_chart(chart_data, height=250)
        else:
            st.info("‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏ä‡πà‡∏ß‡∏á 3 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á‡∏ó‡∏µ‡πà‡∏ú‡πà‡∏≤‡∏ô‡∏°‡∏≤")

# Soil moisture trends
if not df_smartfarm.empty:
    st.caption("üå± ‡πÅ‡∏ô‡∏ß‡πÇ‡∏ô‡πâ‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡∏∑‡πâ‡∏ô‡∏î‡∏¥‡∏ô")
    recent_sf = df_smartfarm[df_smartfarm['timestamp_local_dt'] > time_filter]
    if not recent_sf.empty:
        soil_cols = ['soil_raw_1', 'soil_raw_2', 'soil_raw_3', 'soil_raw_4']
        chart_data = recent_sf.set_index('timestamp_local_dt')[soil_cols]
        st.line_chart(chart_data, height=200)

# --- Footer ---
st.divider()
st.caption("üí° ‡∏´‡∏ô‡πâ‡∏≤‡∏ô‡∏µ‡πâ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥‡∏ó‡∏∏‡∏Å 5 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ | ‡πÉ‡∏ä‡πâ‡∏´‡∏ô‡πâ‡∏≤ '‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏°‡∏∑‡∏≠‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå' ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÄ‡∏ä‡∏¥‡∏á‡∏•‡∏∂‡∏Å")