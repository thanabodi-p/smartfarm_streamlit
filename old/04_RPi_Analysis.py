# page 04

import streamlit as st
import pandas as pd
import plotly.express as px
from utils import load_data_from_mongo

st.set_page_config(layout="wide")
st.title("üçì Raspberry Pi Health Monitoring")

# --- 1. ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ---
# ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏î‡∏¥‡∏° ‡πÅ‡∏ï‡πà‡∏£‡∏∞‡∏ö‡∏∏ collection ‡πÅ‡∏•‡∏∞ device ‡πÉ‡∏´‡∏°‡πà
df = load_data_from_mongo(
    collection_name="raspberry_pi_telemetry_clean",
    device_name="raspberry_pi_status"
)

if df.empty:
    st.warning("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Telemetry ‡∏Ç‡∏≠‡∏á Raspberry Pi")
else:
    # --- 2. ‡∏™‡πà‡∏ß‡∏ô‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô (Current Status) ---
    st.subheader("‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î (Latest Status)")
    latest_data = df.sort_values(by='timestamp_local_dt').iloc[-1]

    col1, col2, col3, col4, col5 = st.columns(5)
    col1.metric("üå°Ô∏è CPU Temperature", f"{latest_data['cpu_temp']:.1f} ¬∞C")
    col2.metric("‚öôÔ∏è CPU Usage", f"{latest_data['cpu_percent']:.1f} %")
    col3.metric("üß† Memory In Use", f"{latest_data['memory_percent']:.1f} %")
    col4.metric("üíΩ Storage", f"{latest_data['disk_percent']:.1f} %")
    col5.metric("üåê Net Latency", f"{latest_data['network_latency_ms']:.1f} ms")

    # --- ‡∏™‡∏£‡∏∏‡∏õ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡πÅ‡∏ö‡∏ö‡∏≠‡∏±‡∏à‡∏â‡∏£‡∏¥‡∏¢‡∏∞ ---
    summary = []
    if latest_data['cpu_temp'] > 70:
        summary.append("‚ö†Ô∏è CPU ‡∏£‡πâ‡∏≠‡∏ô‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ ‡∏Ñ‡∏ß‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏∞‡∏ö‡∏ö‡∏£‡∏∞‡∏ö‡∏≤‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡πâ‡∏≠‡∏ô")
    if latest_data['cpu_percent'] > 90:
        summary.append("‚ö†Ô∏è CPU ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏™‡∏π‡∏á ‡∏≠‡∏≤‡∏à‡∏°‡∏µ‡πÇ‡∏õ‡∏£‡πÄ‡∏ã‡∏™‡∏´‡∏ô‡∏±‡∏Å")
    if latest_data['memory_percent'] > 90:
        summary.append("‚ö†Ô∏è ‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏≥‡πÉ‡∏Å‡∏•‡πâ‡πÄ‡∏ï‡πá‡∏°")
    if latest_data['disk_percent'] > 90:
        summary.append("‚ö†Ô∏è ‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏±‡∏î‡πÄ‡∏Å‡πá‡∏ö‡πÉ‡∏Å‡∏•‡πâ‡πÄ‡∏ï‡πá‡∏°")
    if latest_data['network_latency_ms'] > 200:
        summary.append("‚ö†Ô∏è ‡πÄ‡∏Ñ‡∏£‡∏∑‡∏≠‡∏Ç‡πà‡∏≤‡∏¢‡∏ä‡πâ‡∏≤ ‡∏≠‡∏≤‡∏à‡∏°‡∏µ‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏≠‡∏¥‡∏ô‡πÄ‡∏ó‡∏≠‡∏£‡πå‡πÄ‡∏ô‡πá‡∏ï")

    if summary:
        st.error(" ".join(summary))
    else:
        st.success("‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡πÄ‡∏Å‡∏ì‡∏ë‡πå‡∏õ‡∏Å‡∏ï‡∏¥ üëç")

    # --- 3. ‡∏™‡πà‡∏ß‡∏ô‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÅ‡∏ô‡∏ß‡πÇ‡∏ô‡πâ‡∏° (Historical Trends) ---
    st.divider()
    st.subheader("‡∏Å‡∏£‡∏≤‡∏ü‡πÅ‡∏ô‡∏ß‡πÇ‡∏ô‡πâ‡∏°‡∏¢‡πâ‡∏≠‡∏ô‡∏´‡∏•‡∏±‡∏á (Historical Trends)")
    
    numeric_columns = df.select_dtypes(include=['number']).columns.tolist()
    
    selected_metric = st.selectbox(
        "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏î‡∏π‡πÅ‡∏ô‡∏ß‡πÇ‡∏ô‡πâ‡∏°:",
        options=numeric_columns,
        index=numeric_columns.index('cpu_temp') # ‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
    )
    
    fig_trend = px.line(df, x='timestamp_local_dt', y=selected_metric, title=f"‡πÅ‡∏ô‡∏ß‡πÇ‡∏ô‡πâ‡∏°‡∏Ç‡∏≠‡∏á {selected_metric} ‡∏ï‡∏≤‡∏°‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤")
    st.plotly_chart(fig_trend, use_container_width=True)

    # --- 4. ‡∏™‡πà‡∏ß‡∏ô‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏±‡∏°‡∏û‡∏±‡∏ô‡∏ò‡πå (Correlation Analysis) ---
    st.divider()
    st.subheader("‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏±‡∏°‡∏û‡∏±‡∏ô‡∏ò‡πå‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£ (Correlation Heatmap)")
    st.info("‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏ô‡∏µ‡πâ‡πÅ‡∏™‡∏î‡∏á‡πÉ‡∏´‡πâ‡πÄ‡∏´‡πá‡∏ô‡∏ß‡πà‡∏≤‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏ï‡πà‡∏≤‡∏á‡πÜ ‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏±‡∏°‡∏û‡∏±‡∏ô‡∏ò‡πå‡∏Å‡∏±‡∏ô‡∏°‡∏≤‡∏Å‡∏ô‡πâ‡∏≠‡∏¢‡πÅ‡∏Ñ‡πà‡πÑ‡∏´‡∏ô (‡∏Ñ‡πà‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏Å‡∏•‡πâ 1 ‡∏Ñ‡∏∑‡∏≠‡∏™‡∏±‡∏°‡∏û‡∏±‡∏ô‡∏ò‡πå‡∏Å‡∏±‡∏ô‡∏°‡∏≤‡∏Å, ‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏Å‡∏•‡πâ 0 ‡∏Ñ‡∏∑‡∏≠‡πÑ‡∏°‡πà‡∏™‡∏±‡∏°‡∏û‡∏±‡∏ô‡∏ò‡πå‡∏Å‡∏±‡∏ô)")
    
    # ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ó‡∏µ‡πà‡∏ô‡πà‡∏≤‡∏™‡∏ô‡πÉ‡∏à
    corr_columns = ['cpu_percent', 'cpu_temp', 'memory_percent', 'network_latency_ms']
    corr_matrix = df[corr_columns].corr()
    
    fig_corr = px.imshow(corr_matrix, text_auto=True, color_continuous_scale='RdYlGn', aspect="auto")
    st.plotly_chart(fig_corr, use_container_width=True)

    # --- 5. ‡∏™‡πà‡∏ß‡∏ô‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏∞‡∏à‡∏≤‡∏¢‡∏ï‡∏±‡∏ß (Distribution) ---
    st.divider()
    st.subheader("‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏∞‡∏à‡∏≤‡∏¢‡∏ï‡∏±‡∏ß‡∏Ç‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• (Histogram)")
    
    selected_dist_metric = st.selectbox(
        "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏î‡∏π‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏∞‡∏à‡∏≤‡∏¢‡∏ï‡∏±‡∏ß:",
        options=numeric_columns,
        index=numeric_columns.index('network_latency_ms') # ‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
    )
    
    fig_dist = px.histogram(df, x=selected_dist_metric, title=f"‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏∞‡∏à‡∏≤‡∏¢‡∏ï‡∏±‡∏ß‡∏Ç‡∏≠‡∏á‡∏Ñ‡πà‡∏≤ {selected_dist_metric}", marginal="box")
    st.plotly_chart(fig_dist, use_container_width=True)